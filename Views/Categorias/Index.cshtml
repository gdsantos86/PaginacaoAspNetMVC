@model X.PagedList.IPagedList<PaginacaoAspNetMVC.Models.Categoria>
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Core.Fluent;


@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.GetEnumerator().Current.Nome)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Nome)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.CategoriaId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.CategoriaId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.CategoriaId">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@*Paginação de dados*@
<table>
    <tr>
        <td>
@*             @Html.PagedListPager(Model, pagina => Url.Action("Index", new { pagina }), new PagedListRenderOptions()
            {
                DisplayItemSliceAndTotal = false,
                // ItemSliceAndTotalPosition = ItemSliceAndTotalPosition.End
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                DisplayLinkToNextPage = PagedListDisplayMode.Always,
                MaximumPageNumbersToDisplay = 4
            }) *@

            @* Usando X.PagedList.Mvc.Core.Fluent *@
            @(Html.Pager(Model)
                .Url(pagina => Url.Action("Index", new { pagina }))
                .DisplayLinkToFirstPage(PagedListDisplayMode.IfNeeded)
                .DisplayLinkToLastPage(PagedListDisplayMode.IfNeeded)
                .DisplayLinkToPreviousPage()
                .DisplayLinkToNextPage()
                .MaximumPageNumbersToDisplay(4)
                .Build()
            )
        </td>
        <td>
            @if (Model.HasPreviousPage)
            {
                @if (Model.HasNextPage)
                {
                    <span>Mostrando os itens @((Model.PageNumber - 1) * Model.PageSize + 1) a @(Model.PageNumber * Model.PageSize) de @Model.TotalItemCount.</span>
                }
                else
                {
                    <span>Mostrando os itens @((Model.PageNumber - 1) * Model.PageSize + 1) a @Model.TotalItemCount de @Model.TotalItemCount.</span>
                }
            }
            else
            {
                <span>Mostrando os itens 1 a @Math.Min(Model.PageSize, Model.TotalItemCount) de @Model.TotalItemCount.</span>
            }
        </td>
    </tr>
</table>





